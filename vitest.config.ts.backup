/// <reference types="vitest/config" />
import { cpus } from "node:os";
import path from "node:path";
import react from "@vitejs/plugin-react";
import tsconfigPaths from "vite-tsconfig-paths";
import { defineConfig } from "vitest/config";

/**
 * Optimized Unit & Component Tests Configuration for vibex-app
 *
 * This configuration is specifically tailored for the vibex-app tech stack:
 * - Next.js 15 with App Router and React 19
 * - Bun runtime with comprehensive mocking
 * - TypeScript with path aliases
 * - Handles Inngest, Electric SQL, Redis, AI integrations
 *
 * Covers:
 * - Unit tests: Pure business logic (lib, utils, schemas, hooks)
 * - Component tests: React components with DOM simulation
 * - Client-side code that doesn't require external services
 */
// Storybook integration moved to separate config (vitest.storybook.config.ts)
// to prevent hanging issues with regular unit tests

export default defineConfig({
  plugins: [
    // Plugin order is critical for performance - React first, then path resolution
    react({
      // Optimize React plugin performance
      jsxImportSource: "@emotion/react",
      babel: {
        plugins: process.env.NODE_ENV === 'test' ? [] : undefined
      }
    }),
    tsconfigPaths({
      // Optimize path resolution performance
      root: ".",
      projects: ["./tsconfig.json"]
    })
  ],
  test: {
    name: "unit-component",
    environment: "jsdom",
    // Required for React component testing
    environmentOptions: {
      jsdom: {
        // Ensure JSDOM is properly initialized with all required APIs
        resources: "usable",
        runScripts: "dangerously",
        pretendToBeVisual: true,
        // Add document.body and complete DOM tree before tests run
        html: '<!DOCTYPE html><html><head></head><body></body></html>',
        url: "http://localhost:3000"
      }
    },
    globals: true,
    // Enables Jest-like global functions (describe, it, expect)
    setupFiles: ["./test-setup.ts"],
    // Uses existing comprehensive test setup

    // Optimized test file patterns for vibex-app structure
    include: [
      // Unit tests: Core business logic
      "lib/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}",
      "utils/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}",
      "src/schemas/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}",
      "src/hooks/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}",
      "src/shared/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}",
      // Component tests: React components and UI
      "components/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}",
      "app/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}",
      "hooks/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}",
      "stores/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}",
      // Test directories
      "tests/unit/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}",
      "__tests__/**/*.{js,mjs,cjs,ts,mts,cts,jsx,tsx}"
    ],
    // Exclude integration and API tests (handled by integration config)
    exclude: [
      // Integration tests
      "tests/integration/**",
      "tests/api/**",
      "tests/e2e/**",
      "**/*.integration.{test,spec}.*",
      "**/*.e2e.{test,spec}.*",
      "**/*.browser.{test,spec}.*",
      // API routes and server actions (integration tests)
      "app/api/**/*.{test,spec}.*",
      "app/actions/**/*.{test,spec}.*",
      // External service integrations (integration tests)
      "lib/inngest/**/*.{test,spec}.*",
      "lib/redis/**/*.{test,spec}.*",
      "lib/electric/**/*.{test,spec}.*",
      "lib/migration/**/*.{test,spec}.*",
      "lib/monitoring/**/*.{test,spec}.*",
      "db/**/*.{test,spec}.*",
      // Exclude Storybook files to prevent conflicts
      "**/*.stories.*",
      "**/storybook-static/**",
      "**/.storybook/**"
    ],
    // Coverage configuration optimized for vibex-app
    coverage: {
      provider: "v8",
      reporter: ["text", "json", "html", "lcov"],
      reportsDirectory: "./coverage/unit-component",
      include: [
      // Unit test coverage
      "lib/**/*.{js,ts,jsx,tsx}", "utils/**/*.{js,ts,jsx,tsx}", "src/schemas/**/*.{js,ts,jsx,tsx}", "src/hooks/**/*.{js,ts,jsx,tsx}", "src/shared/**/*.{js,ts,jsx,tsx}",
      // Component test coverage
      "components/**/*.{js,ts,jsx,tsx}", "app/**/*.{js,ts,jsx,tsx}", "hooks/**/*.{js,ts,jsx,tsx}", "stores/**/*.{js,ts,jsx,tsx}"],
      exclude: [
      // Standard exclusions
      "coverage/**", "dist/**", "**/node_modules/**", "**/test-setup.ts", "**/tests/setup/**", "**/*.d.ts", "**/*.config.{js,ts}", "**/migrations/**", "**/*.test.*", "**/*.spec.*", "**/cypress/**", "**/e2e/**", "**/playwright/**", "**/storybook-static/**", "**/.storybook/**",
      // Test utilities and mocks
      "**/mocks/**", "**/fixtures/**", "**/__tests__/**", "**/test-utils/**", "lib/test-utils/**"],
      thresholds: {
        global: {
          branches: 80,
          // Balanced threshold for mixed test types
          functions: 80,
          lines: 80,
          statements: 80
        }
      }
    },
    // Performance optimizations for Bun + vibex-app (FIXED: Use forks instead of threads)
    pool: "forks",
    // Use forks instead of threads to avoid hanging
    poolOptions: {
      forks: {
        singleFork: true, // Use single fork to prevent coverage hanging
        isolate: true, // Isolate test files to prevent memory leaks
        minForks: 1,
        maxForks: Math.max(1, Math.floor(cpus().length / 2))
      }
    },
    // Optimized timeouts for faster test execution
    testTimeout: 8000,
    // Reduced from 10000 for faster feedback
    hookTimeout: 3000,
    // Reduced from 5000 for quicker setup/teardown
    teardownTimeout: 1500,
    // Reduced from 2000 for faster cleanup
    // Optimized concurrency based on CPU cores
    maxConcurrency: Math.max(2, Math.floor(cpus().length * 0.75)),
    // Test execution settings optimized for stability
    sequence: {
      concurrent: true,
      shuffle: false,
      hooks: 'parallel' // Run setup/teardown hooks in parallel when safe
    },
    // Enable file parallelization for better performance
    fileParallelism: true,
    // Cache configuration will use Vite's default cacheDir/vitest

    // Output configuration
    outputFile: {
      json: "./coverage/unit-component/test-results.json"
    },
    // Environment-aware reporting
    reporters: process.env.CI ? ["default", "json"] : ["default"]
    // Storybook testing moved to separate config to prevent hanging
  },
  // Path resolution for vibex-app
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "."),
      "@/lib": path.resolve(__dirname, "./lib"),
      "@/components": path.resolve(__dirname, "./components"),
      "@/app": path.resolve(__dirname, "./app"),
      "@/hooks": path.resolve(__dirname, "./hooks"),
      "@/utils": path.resolve(__dirname, "./utils"),
      "@/types": path.resolve(__dirname, "./types"),
      "@/stores": path.resolve(__dirname, "./stores"),
      "@/src": path.resolve(__dirname, "./src"),
      "@/db": path.resolve(__dirname, "./db"),
      "@/tests": path.resolve(__dirname, "./tests")
    }
  },
  // Vitest-specific definitions
  define: {
    "import.meta.vitest": false
  },
  // Optimized dependency handling for vibex-app stack
  optimizeDeps: {
    include: [
      "vitest",
      "@testing-library/react",
      "@testing-library/jest-dom", 
      "@testing-library/user-event",
      "react",
      "react-dom",
      "react/jsx-runtime",
      "react/jsx-dev-runtime"
    ],
    exclude: [
      "@electric-sql",
      "@neondatabase", 
      "inngest",
      "ioredis",
      "@browserbasehq/sdk",
      "stagehand"
    ],
    // Force optimization to prevent hanging
    force: true
  },
  // Modern build target for better performance
  build: {
    target: "es2022",
    minify: false,
    sourcemap: false,
    // Optimize build performance
    rollupOptions: {
      output: {
        manualChunks: undefined // Disable manual chunking for tests
      },
      treeshake: false // Disable tree shaking for tests to improve speed
    },
    // Improve build cache
    emptyOutDir: false,
    // Use esbuild for faster builds
    commonjsOptions: {
      include: [/node_modules/]
    }
  },
  // Enhanced ESBuild configuration for better performance
  esbuild: {
    target: "es2022",
    // Optimize for test environment
    minify: false
  }
});